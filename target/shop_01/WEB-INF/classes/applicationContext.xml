<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!--
        spring-aop：面向切面编程
        spring-aspects：集成AspectJ
        spring-instrument：提供一些类级的工具支持和ClassLoader级的实现，用于服务器
        spring-instrument-tomcat：针对tomcat的instrument实现

        spring-jdbc：jdbc的支持
        spring-tx：事务控制
        spring-orm：对象关系映射，集成orm框架
        spring-oxm：对象xml映射
        spring-jms：java消息服务

        spring-web：基础web功能，如文件上传
        spring-webmvc：mvc实现
        spring-webmvc-portlet：基于portlet的mvc实现
        spring-websocket：为web应用提供的高效通信工具
        spring-messaging：用于构建基于消息的应用程序

        spring-test：spring测试，提供junit与mock测试功能
        spring-context-support：spring额外支持包，比如邮件服务、视图解析等
    -->
    <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql:///shop?characterEncoding=UTF-8"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="5"/>
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="15"/>
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="10"/>
        <!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="5"/>
        <!--removeAbandoned: 是否自动回收超时连接-->
        <property name="removeAbandoned" value="true"/>
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 最大等待时间 -->
        <property name="maxWait" value="60000"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.show_sql">true</prop> <!-- 在控制台显示Sql语句 -->
                <prop key="hibernate.format_sql">true</prop><!-- 格式化sql语句 -->

                <!-- 数据库类型 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
            </props>
        </property>
        <!-- 调用映射文件 -->
        <property name="mappingResources">
            <list>
                <value>hbm/Product.hbm.xml</value>
                <value>hbm/Category.hbm.xml</value>
                <value>hbm/Store.hbm.xml</value>
                <value>hbm/Order.hbm.xml</value>
                <value>hbm/User.hbm.xml</value>
                <value>hbm/Brand.hbm.xml</value>
            </list>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <!-- 创建事务管理器，管理sessionFactory(因为所有的session都是从sessionFactory获取的) -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- 配置通知 -->
    <tx:advice id="txAdvice">
        <!-- 定义事务属性，声明事务规则 -->
        <tx:attributes>
            <tx:method name="find*" read-only="true"/><!-- find...只读 -->
            <!-- 事务规则：如果当前没有事务，就新建一个事务，如果已经存在一个事务，加入到这个事务中，这是最常见的选择 -->
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="buy*" propagation="REQUIRED"/>
            <!-- 其余部分方法，使用事务，只读 -->
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <aop:config>
        <!-- 定义切入点 -->
        <aop:pointcut id="serviceMethod" expression="execution(* com.web.service.impl.*.*(..))"/>
        <!-- 将事务通知与切入点组合 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
    </aop:config>


    <!-- 配置 网店数据 -->
    <bean id="storeAction" class="com.web.action.StoreAction">
        <property name="storeService" ref="storeServiceInter"/>
    </bean>
    <bean id="storeServiceInter" class="com.web.service.impl.StoreServiceImpl">
        <property name="storeDao" ref="storeDaoInter"/>
    </bean>
    <bean id="storeDaoInter" class="com.web.dao.impl.StoreDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>


    <!-- 配置 商品种类数据 -->
    <bean id="categoryAction" class="com.web.action.CategoryAction">
        <property name="categoryServiceInter" ref="categoryServiceInter"/>
    </bean>
    <bean id="categoryServiceInter" class="com.web.service.impl.CategoryServiceImpl">
        <property name="categoryDao" ref="categoryDaoInter"/>
    </bean>
    <bean id="categoryDaoInter" class="com.web.dao.impl.CategoryDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 配置 商品品牌数据 -->
    <bean id="brandAction" class="com.web.action.BrandAction">
        <property name="brandServiceInter" ref="brandServiceInter"/>
        <property name="fileUploadInter" ref="fileUploadInter"/>
    </bean>
    <bean id="fileUploadInter" class="com.web.util.FileUpload"/>
    <bean id="brandServiceInter" class="com.web.service.impl.BrandServiceImpl">
        <property name="brandDao" ref="brandDaoInter"/>
    </bean>
    <bean id="brandDaoInter" class="com.web.dao.impl.BrandDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 配置商品信息 -->
    <bean id="productAction" class="com.web.action.ProductAction">
        <property name="brandServiceInter" ref="brandServiceInter"/>
        <property name="categoryServiceInter" ref="categoryServiceInter"/>
        <property name="productService" ref="productServiceInter"/>
        <property name="storeService" ref="storeServiceInter"/>
        <property name="fileUploadInter" ref="fileUploadInter"/>
    </bean>
    <bean id="productServiceInter" class="com.web.service.impl.ProductServiceImpl">
        <property name="productDao" ref="productDaoInter"/>
        <property name="storeService" ref="storeServiceInter"/>
        <property name="userService" ref="userServiceInter"/>
        <property name="orderService" ref="orderServiceInter"/>
    </bean>
    <bean id="productDaoInter" class="com.web.dao.impl.ProductDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!--配置商城首页-->
    <bean id="indexAction" class="com.web.action.IndexAction">
        <property name="categoryServiceInter" ref="categoryServiceInter"/>
        <property name="brandServiceInter" ref="brandServiceInter"/>
        <property name="productService" ref="productServiceInter"/>
    </bean>

    <!-- 配置会员数据 -->
    <bean id="userAction" class="com.web.action.UserAction">
        <property name="userService" ref="userServiceInter"/>
    </bean>
    <bean id="userServiceInter" class="com.web.service.impl.UserServiceImpl">
        <property name="userDao" ref="userDaoInter"/>
    </bean>
    <bean id="userDaoInter" class="com.web.dao.impl.UserDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- 配置订单数据 -->
    <bean id="orderAction" class="com.web.action.OrderAction">
        <property name="orderService" ref="orderServiceInter"/>
    </bean>
    <bean id="orderServiceInter" class="com.web.service.impl.OrderServiceImpl">
        <property name="orderDao" ref="orderDaoInter"/>
        <property name="storeService" ref="storeServiceInter"/>
        <property name="userService" ref="userServiceInter"/>
    </bean>
    <bean id="orderDaoInter" class="com.web.dao.impl.OrderDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
</beans>